---

# TODO: NEEDS CONVERTING TO USE NEW GLUSTER MOUNTS :-)
# TODO: NEEDS CONVERTING TO USE NEW GLUSTER MOUNTS :-)

- name: Deploy Docker Swarm stacks
  hosts: docker_manager
  gather_facts: no
  become: yes
  tags:
    - docker_stacks

  vars:

    # Destination of docker compose files on manager nodes
    docker_compose_dest: /docker/compose_files
    docker_data_dest: /nfs/data

  tasks:

    - name: Block to create list of stacks if not supplied
      block:

        - name: Find list of stacks
          find:
            paths: "{{ inventory_dir }}/../../stacks"
            depth: 1
            file_type: directory
          delegate_to: localhost
          register: find_stack_names

        - name: Create list of stacks
          set_fact:
            docker_stack_names: "{{ find_stack_names['files'] |
              map(attribute='path') | map('basename') | list }}"

      when: not docker_stack_names | default([]) | length

    - name: Debug Docker Stack names
      debug:
        var: docker_stack_names
        verbosity: "{{ verbosity_level | default(1) }}"

    - name: Find stack compose files
      find:
        paths: "{{ inventory_dir }}/../../stacks/{{ item }}"
        pattern: "docker-compose*.yml"
        depth: 1
        file_type: file
      run_once: yes
      delegate_to: localhost
      loop: "{{ docker_stack_names | default([]) }}"
      register: find_compose_files

    - name: Store list of available compose files for every stack
      vars:
        # Set list of compose file search criteria
        layers:
          - "docker-compose.yml"
          - "docker-compose-{{ docker_stack_env | default('prod') }}.yml"
      set_fact:
        # OK, what is going on here?
        # docker_compose_files : a dictionary of lists
        # docker_compose_files | default({}) : Create empty dict on first loop
        # combine() : append key:value to dictionary
        # item[0]: : use stack name as key
        # docker_compose_files[item[0]] | default([]) : Use the existing
        # contents of the key's value - default to empty list on first occurence
        # find_compose_files['results'] : contents of above find task results
        # selectattr('item', 'equalto', item[0]) : filter by stack name
        # map(attribute='files') : grab the 'files' dictionaries
        # selectattr('path', 'contains', item[1]) : filter only paths that
        # contain the compose file search criterion
        # map(attribute='path') : grab the 'path' value
        # list | first : map creates a list, so get first (and only) element
        docker_compose_files: "{{ docker_compose_files | default({}) | combine(
          { item[0]: docker_compose_files[item[0]] | default([]) +
            [ find_compose_files['results'] |
              selectattr('item', 'equalto', item[0]) | list |
              map(attribute='files') | list | flatten |
              selectattr('path', 'contains', item[1]) | list |
              map(attribute='path') | list | first
            ]
          }
        ) }}"
      # item[0] : stack name
      # item[1] : compose file search criterion
      loop: "{{ docker_stack_names | product(layers) | list }}"
      # Only append to fact when the compose file exists
      when: find_compose_files['results'] |
              selectattr('item', 'equalto', item[0]) | list |
              map(attribute='files') | list | flatten |
              selectattr('path', 'contains', item[1]) | list |
              map(attribute='path') | list | length

    - name: Debug available compose files
      debug:
        var: docker_compose_files
        verbosity: "{{ verbosity_level | default(1) }}"

    - name: Copy stack compose files to managers
      copy:
        src: "{{ inventory_dir }}/../../stacks/{{ item }}/"
        dest: "{{ docker_compose_dest }}/{{ item }}/"
        mode: "0640"
      loop: "{{ docker_stack_names | default([]) }}"
      when: not docker_stack_state | default('present') == 'absent'

    - name: Copy stack data files to nfs server
      copy:
        src: "{{ inventory_dir }}/../../stacks/test/data/{{ item['src'] }}"
        dest: "{{ docker_data_dest }}/{{ item['dest'] }}"
        mode: "0777"
      delegate_to: nfs-server-1
      run_once: yes
      loop:
        - src: web/nginx.conf
          dest: web/conf/
        - src: web/index.html
          dest: web/html/
        - src: web/info.php
          dest: web/html/
        - src: web/castle.php
          dest: web/html/
      when:
        - not docker_stack_state | default('present') == 'absent'
        # - logic for stack name not in dict key

    - name: Deploy stacks
      vars:
        prefix: "{{ docker_compose_dest }}/{{ item }}/"
      docker_stack:
        name: "{{ item }}"
        state: "{{ docker_stack_state | default('present') }}"
        # Append prefix to all elements of docker_compose_files[item] after
        # stripping the path from the filename
        compose: "{{ [prefix] | product(docker_compose_files[item] |
          map('basename')) | map('join') | list }}"
        prune: "{{ docker_stack_prune | default(False) | bool }}"
      run_once: yes
      loop: "{{ docker_stack_names | default([]) }}"
      register: deploy_stacks

    - name: Debug deploy_stacks
      debug:
        var: deploy_stacks
        verbosity: "{{ verbosity_level | default(1) }}"
